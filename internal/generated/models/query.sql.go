// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getActivityEnduranceOutdoor = `-- name: GetActivityEnduranceOutdoor :one
SELECT
	a.id, a.provider_id, a.user_id, a.provider_raw_activity_id, a.name, a.description, a.sport, a.start_time, a.end_time, a.iana_timezone, a.utc_offset, a.elapsed_time, a.moving_time, a.distance, a.elev_gain, a.elev_loss, a.avg_speed, a.avg_hr, a.max_hr, a.summary_polyline, a.summary_route, a.gpx_file_uri, a.fit_file_uri, a.created_at, a.updated_at, a.deleted_at
FROM vo2.activities_endurance_outdoor a
WHERE a.id = $1
`

func (q *Queries) GetActivityEnduranceOutdoor(ctx context.Context, id uuid.UUID) (Vo2ActivitiesEnduranceOutdoor, error) {
	row := q.db.QueryRowContext(ctx, getActivityEnduranceOutdoor, id)
	var i Vo2ActivitiesEnduranceOutdoor
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.UserID,
		&i.ProviderRawActivityID,
		&i.Name,
		&i.Description,
		&i.Sport,
		&i.StartTime,
		&i.EndTime,
		&i.IanaTimezone,
		&i.UtcOffset,
		&i.ElapsedTime,
		&i.MovingTime,
		&i.Distance,
		&i.ElevGain,
		&i.ElevLoss,
		&i.AvgSpeed,
		&i.AvgHr,
		&i.MaxHr,
		&i.SummaryPolyline,
		&i.SummaryRoute,
		&i.GpxFileUri,
		&i.FitFileUri,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getActivityTags = `-- name: GetActivityTags :many
SELECT
    t.id, t.name, t.description, t.created_at, t.updated_at, t.deleted_at
FROM
vo2.activities_endurance_outdoor_tags at
JOIN vo2.activity_tags t ON at.tag_id = t.id
WHERE at.activity_id = $1
`

func (q *Queries) GetActivityTags(ctx context.Context, activityID uuid.UUID) ([]Vo2ActivityTag, error) {
	rows, err := q.db.QueryContext(ctx, getActivityTags, activityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vo2ActivityTag
	for rows.Next() {
		var i Vo2ActivityTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivitiesEnduranceOutdoorByTag = `-- name: ListActivitiesEnduranceOutdoorByTag :many
SELECT
	a.id, a.provider_id, a.user_id, a.provider_raw_activity_id, a.name, a.description, a.sport, a.start_time, a.end_time, a.iana_timezone, a.utc_offset, a.elapsed_time, a.moving_time, a.distance, a.elev_gain, a.elev_loss, a.avg_speed, a.avg_hr, a.max_hr, a.summary_polyline, a.summary_route, a.gpx_file_uri, a.fit_file_uri, a.created_at, a.updated_at, a.deleted_at
FROM vo2.activities_endurance_outdoor a
JOIN vo2.activities_endurance_outdoor_tags at ON at.activity_id = a.id
JOIN vo2.activity_tags t ON at.tag_id = t.id
WHERE
	a.provider_id = $1 AND
	a.user_id = $2 AND
	lower(t.name) = lower($3)
`

type ListActivitiesEnduranceOutdoorByTagParams struct {
	ProviderID int32
	UserID     uuid.UUID
	Tag        string
}

func (q *Queries) ListActivitiesEnduranceOutdoorByTag(ctx context.Context, arg ListActivitiesEnduranceOutdoorByTagParams) ([]Vo2ActivitiesEnduranceOutdoor, error) {
	rows, err := q.db.QueryContext(ctx, listActivitiesEnduranceOutdoorByTag, arg.ProviderID, arg.UserID, arg.Tag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vo2ActivitiesEnduranceOutdoor
	for rows.Next() {
		var i Vo2ActivitiesEnduranceOutdoor
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.UserID,
			&i.ProviderRawActivityID,
			&i.Name,
			&i.Description,
			&i.Sport,
			&i.StartTime,
			&i.EndTime,
			&i.IanaTimezone,
			&i.UtcOffset,
			&i.ElapsedTime,
			&i.MovingTime,
			&i.Distance,
			&i.ElevGain,
			&i.ElevLoss,
			&i.AvgSpeed,
			&i.AvgHr,
			&i.MaxHr,
			&i.SummaryPolyline,
			&i.SummaryRoute,
			&i.GpxFileUri,
			&i.FitFileUri,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertActivityEnduranceOutdoor = `-- name: UpsertActivityEnduranceOutdoor :one
INSERT INTO vo2.activities_endurance_outdoor
	(provider_id, user_id, provider_raw_activity_id, name, description, sport, start_time, end_time, iana_timezone, utc_offset, elapsed_time, moving_time, distance, elev_gain, elev_loss, avg_speed, avg_hr, max_hr, summary_polyline, summary_route, gpx_file_uri, fit_file_uri)
VALUES
	(
    	$1,
    	$2,
    	$3,
    	$4,
    	$5,
    	$6,
    	$7,
    	$8,
    	$9,
    	$10,
    	$11,
    	$12,
    	$13,
    	$14,
    	$15,
    	$16,
    	$17,
    	$18,
    	$19,
    	NULLIF($20, ''),
    	$21,
    	$22
)
ON CONFLICT
	(provider_id, user_id, provider_raw_activity_id)
DO UPDATE SET
	name = $4,
	description = $5,
	sport = $6,
	start_time = $7,
	end_time = $8,
	iana_timezone = $9,
	utc_offset = $10,
	elapsed_time = $11,
	moving_time = $12,
	distance = $13,
	elev_gain = $14,
	elev_loss = $15,
	avg_speed = $16,
	avg_hr = $17,
	max_hr = $18,
	summary_polyline = $19,
	summary_route = NULLIF($20, ''),
	gpx_file_uri = $21,
	fit_file_uri = $22
RETURNING id, provider_id, user_id, provider_raw_activity_id, name, description, sport, start_time, end_time, iana_timezone, utc_offset, elapsed_time, moving_time, distance, elev_gain, elev_loss, avg_speed, avg_hr, max_hr, summary_polyline, summary_route, gpx_file_uri, fit_file_uri, created_at, updated_at, deleted_at
`

type UpsertActivityEnduranceOutdoorParams struct {
	ProviderID            int32
	UserID                uuid.UUID
	ProviderRawActivityID uuid.UUID
	Name                  string
	Description           sql.NullString
	Sport                 string
	StartTime             time.Time
	EndTime               time.Time
	IanaTimezone          sql.NullString
	UtcOffset             sql.NullInt32
	ElapsedTime           int32
	MovingTime            int32
	Distance              int32
	ElevGain              sql.NullInt32
	ElevLoss              sql.NullInt32
	AvgSpeed              float64
	AvgHr                 sql.NullInt32
	MaxHr                 sql.NullInt32
	SummaryPolyline       sql.NullString
	SummaryRoute          interface{}
	GpxFileUri            sql.NullString
	FitFileUri            sql.NullString
}

func (q *Queries) UpsertActivityEnduranceOutdoor(ctx context.Context, arg UpsertActivityEnduranceOutdoorParams) (Vo2ActivitiesEnduranceOutdoor, error) {
	row := q.db.QueryRowContext(ctx, upsertActivityEnduranceOutdoor,
		arg.ProviderID,
		arg.UserID,
		arg.ProviderRawActivityID,
		arg.Name,
		arg.Description,
		arg.Sport,
		arg.StartTime,
		arg.EndTime,
		arg.IanaTimezone,
		arg.UtcOffset,
		arg.ElapsedTime,
		arg.MovingTime,
		arg.Distance,
		arg.ElevGain,
		arg.ElevLoss,
		arg.AvgSpeed,
		arg.AvgHr,
		arg.MaxHr,
		arg.SummaryPolyline,
		arg.SummaryRoute,
		arg.GpxFileUri,
		arg.FitFileUri,
	)
	var i Vo2ActivitiesEnduranceOutdoor
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.UserID,
		&i.ProviderRawActivityID,
		&i.Name,
		&i.Description,
		&i.Sport,
		&i.StartTime,
		&i.EndTime,
		&i.IanaTimezone,
		&i.UtcOffset,
		&i.ElapsedTime,
		&i.MovingTime,
		&i.Distance,
		&i.ElevGain,
		&i.ElevLoss,
		&i.AvgSpeed,
		&i.AvgHr,
		&i.MaxHr,
		&i.SummaryPolyline,
		&i.SummaryRoute,
		&i.GpxFileUri,
		&i.FitFileUri,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

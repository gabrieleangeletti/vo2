// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getActivityEndurance = `-- name: GetActivityEndurance :one
SELECT
	a.id, a.provider_id, a.athlete_id, a.provider_raw_activity_id, a.name, a.description, a.sport, a.start_time, a.end_time, a.iana_timezone, a.utc_offset, a.elapsed_time, a.moving_time, a.distance, a.elev_gain, a.elev_loss, a.avg_speed, a.avg_hr, a.max_hr, a.summary_polyline, a.summary_route, a.gpx_file_uri, a.fit_file_uri, a.created_at, a.updated_at, a.deleted_at
FROM vo2.activities_endurance a
WHERE
    a.id = $1
`

func (q *Queries) GetActivityEndurance(ctx context.Context, id uuid.UUID) (Vo2ActivitiesEndurance, error) {
	row := q.db.QueryRowContext(ctx, getActivityEndurance, id)
	var i Vo2ActivitiesEndurance
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.AthleteID,
		&i.ProviderRawActivityID,
		&i.Name,
		&i.Description,
		&i.Sport,
		&i.StartTime,
		&i.EndTime,
		&i.IanaTimezone,
		&i.UtcOffset,
		&i.ElapsedTime,
		&i.MovingTime,
		&i.Distance,
		&i.ElevGain,
		&i.ElevLoss,
		&i.AvgSpeed,
		&i.AvgHr,
		&i.MaxHr,
		&i.SummaryPolyline,
		&i.SummaryRoute,
		&i.GpxFileUri,
		&i.FitFileUri,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getActivityTags = `-- name: GetActivityTags :many
SELECT
    t.id, t.name, t.description, t.created_at, t.updated_at, t.deleted_at
FROM
vo2.activities_endurance_tags at
JOIN vo2.activity_tags t ON at.tag_id = t.id
WHERE
    at.activity_id = $1
`

func (q *Queries) GetActivityTags(ctx context.Context, activityID uuid.UUID) ([]Vo2ActivityTag, error) {
	rows, err := q.db.QueryContext(ctx, getActivityTags, activityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vo2ActivityTag
	for rows.Next() {
		var i Vo2ActivityTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAthleteByID = `-- name: GetAthleteByID :one
SELECT
    id, user_id, age, height_cm, country, gender, first_name, last_name, display_name, email, created_at, updated_at, deleted_at
FROM
    vo2.athletes
WHERE
    id = $1
`

func (q *Queries) GetAthleteByID(ctx context.Context, id uuid.UUID) (Vo2Athlete, error) {
	row := q.db.QueryRowContext(ctx, getAthleteByID, id)
	var i Vo2Athlete
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Age,
		&i.HeightCm,
		&i.Country,
		&i.Gender,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAthleteCurrentMeasurements = `-- name: GetAthleteCurrentMeasurements :one
SELECT
    athlete_id, lt1_value, lt1_measured_at, lt1_iana_timezone, lt1_source, lt1_notes, lt2_value, lt2_measured_at, lt2_iana_timezone, lt2_source, lt2_notes, vo2max_value, vo2max_measured_at, vo2max_iana_timezone, vo2max_source, vo2max_notes, weight_value, weight_measured_at, weight_iana_timezone, weight_source, weight_notes
FROM
    vo2.athlete_current_measurements
WHERE
    athlete_id = $1
`

func (q *Queries) GetAthleteCurrentMeasurements(ctx context.Context, athleteID uuid.UUID) (Vo2AthleteCurrentMeasurement, error) {
	row := q.db.QueryRowContext(ctx, getAthleteCurrentMeasurements, athleteID)
	var i Vo2AthleteCurrentMeasurement
	err := row.Scan(
		&i.AthleteID,
		&i.Lt1Value,
		&i.Lt1MeasuredAt,
		&i.Lt1IanaTimezone,
		&i.Lt1Source,
		&i.Lt1Notes,
		&i.Lt2Value,
		&i.Lt2MeasuredAt,
		&i.Lt2IanaTimezone,
		&i.Lt2Source,
		&i.Lt2Notes,
		&i.Vo2maxValue,
		&i.Vo2maxMeasuredAt,
		&i.Vo2maxIanaTimezone,
		&i.Vo2maxSource,
		&i.Vo2maxNotes,
		&i.WeightValue,
		&i.WeightMeasuredAt,
		&i.WeightIanaTimezone,
		&i.WeightSource,
		&i.WeightNotes,
	)
	return i, err
}

const getAthleteVolume = `-- name: GetAthleteVolume :many
WITH selected_sports AS (
    SELECT DISTINCT lower(ss.sport) AS sport
    FROM unnest($1::text[]) AS ss(sport)
),
all_periods AS (
    SELECT generate_series(
        date_trunc($2::text, $3::timestamptz),
        date_trunc($2::text, NOW()),
        CASE
            WHEN $2::text = 'day' THEN '1 day'
            WHEN $2::text = 'week' THEN '1 week'
            ELSE '1 month'
        END::interval
    ) as period_ts
),
period_sports AS (
    SELECT ap.period_ts, ss.sport
    FROM all_periods ap
    CROSS JOIN selected_sports ss
),
period_data AS (
    SELECT
        CASE
            WHEN $2::text = 'day' THEN date_trunc('day', a.start_time)
            WHEN $2::text = 'week' THEN date_trunc('week', a.start_time)
            ELSE date_trunc('month', a.start_time)
        END as period_ts,
        lower(a.sport) AS sport,
        COUNT(*)::int AS activity_count,
        COALESCE(SUM(a.distance), 0)::int AS total_distance_meters,
        COALESCE(SUM(a.elapsed_time), 0)::bigint AS total_elapsed_time_seconds,
        COALESCE(SUM(a.moving_time), 0)::bigint AS total_moving_time_seconds,
        COALESCE(SUM(a.elev_gain), 0)::int AS total_elevation_gain_meters
    FROM vo2.activities_endurance a
    JOIN vo2.providers p ON a.provider_id = p.id
    JOIN selected_sports ss ON lower(a.sport) = ss.sport
    WHERE
        a.athlete_id = $4
        AND p.slug = $5
        AND a.start_time >= $3::timestamptz
    GROUP BY period_ts, lower(a.sport)
)
SELECT
    period_sports.period_ts::date::text as period,
    period_sports.sport,
    COALESCE(period_data.activity_count, 0)::int as activity_count,
    COALESCE(period_data.total_distance_meters, 0)::int as total_distance_meters,
    COALESCE(period_data.total_elapsed_time_seconds, 0)::bigint as total_elapsed_time_seconds,
    COALESCE(period_data.total_moving_time_seconds, 0)::bigint as total_moving_time_seconds,
    COALESCE(period_data.total_elevation_gain_meters, 0)::int as total_elevation_gain_meters
FROM period_sports
LEFT JOIN period_data
    ON period_sports.period_ts = period_data.period_ts
    AND period_sports.sport = period_data.sport
ORDER BY period_sports.sport, period_sports.period_ts
`

type GetAthleteVolumeParams struct {
	Sports       []string
	Frequency    string
	StartDate    time.Time
	AthleteID    uuid.UUID
	ProviderSlug string
}

type GetAthleteVolumeRow struct {
	Period                   string
	Sport                    string
	ActivityCount            int32
	TotalDistanceMeters      int32
	TotalElapsedTimeSeconds  int64
	TotalMovingTimeSeconds   int64
	TotalElevationGainMeters int32
}

func (q *Queries) GetAthleteVolume(ctx context.Context, arg GetAthleteVolumeParams) ([]GetAthleteVolumeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAthleteVolume,
		pq.Array(arg.Sports),
		arg.Frequency,
		arg.StartDate,
		arg.AthleteID,
		arg.ProviderSlug,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAthleteVolumeRow
	for rows.Next() {
		var i GetAthleteVolumeRow
		if err := rows.Scan(
			&i.Period,
			&i.Sport,
			&i.ActivityCount,
			&i.TotalDistanceMeters,
			&i.TotalElapsedTimeSeconds,
			&i.TotalMovingTimeSeconds,
			&i.TotalElevationGainMeters,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAthletes = `-- name: GetUserAthletes :many
SELECT
    id, user_id, age, height_cm, country, gender, first_name, last_name, display_name, email, created_at, updated_at, deleted_at
FROM
    vo2.athletes
WHERE
    user_id = $1
`

func (q *Queries) GetUserAthletes(ctx context.Context, userID uuid.UUID) ([]Vo2Athlete, error) {
	rows, err := q.db.QueryContext(ctx, getUserAthletes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vo2Athlete
	for rows.Next() {
		var i Vo2Athlete
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Age,
			&i.HeightCm,
			&i.Country,
			&i.Gender,
			&i.FirstName,
			&i.LastName,
			&i.DisplayName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivitiesEnduranceById = `-- name: ListActivitiesEnduranceById :many
SELECT
	id, provider_id, athlete_id, provider_raw_activity_id, name, description, sport, start_time, end_time, iana_timezone, utc_offset, elapsed_time, moving_time, distance, elev_gain, elev_loss, avg_speed, avg_hr, max_hr, summary_polyline, summary_route, gpx_file_uri, fit_file_uri, created_at, updated_at, deleted_at
FROM vo2.activities_endurance
WHERE
    id = ANY($1::uuid[])
`

func (q *Queries) ListActivitiesEnduranceById(ctx context.Context, ids []uuid.UUID) ([]Vo2ActivitiesEndurance, error) {
	rows, err := q.db.QueryContext(ctx, listActivitiesEnduranceById, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vo2ActivitiesEndurance
	for rows.Next() {
		var i Vo2ActivitiesEndurance
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.AthleteID,
			&i.ProviderRawActivityID,
			&i.Name,
			&i.Description,
			&i.Sport,
			&i.StartTime,
			&i.EndTime,
			&i.IanaTimezone,
			&i.UtcOffset,
			&i.ElapsedTime,
			&i.MovingTime,
			&i.Distance,
			&i.ElevGain,
			&i.ElevLoss,
			&i.AvgSpeed,
			&i.AvgHr,
			&i.MaxHr,
			&i.SummaryPolyline,
			&i.SummaryRoute,
			&i.GpxFileUri,
			&i.FitFileUri,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivitiesEnduranceByTag = `-- name: ListActivitiesEnduranceByTag :many
SELECT
	a.id, a.provider_id, a.athlete_id, a.provider_raw_activity_id, a.name, a.description, a.sport, a.start_time, a.end_time, a.iana_timezone, a.utc_offset, a.elapsed_time, a.moving_time, a.distance, a.elev_gain, a.elev_loss, a.avg_speed, a.avg_hr, a.max_hr, a.summary_polyline, a.summary_route, a.gpx_file_uri, a.fit_file_uri, a.created_at, a.updated_at, a.deleted_at
FROM vo2.activities_endurance a
JOIN vo2.activities_endurance_tags at ON at.activity_id = a.id
JOIN vo2.activity_tags t ON at.tag_id = t.id
WHERE
	a.provider_id = $1 AND
	a.athlete_id = $2 AND
	lower(t.name) = lower($3)
ORDER BY
    a.start_time DESC
`

type ListActivitiesEnduranceByTagParams struct {
	ProviderID int32
	AthleteID  uuid.UUID
	Tag        string
}

func (q *Queries) ListActivitiesEnduranceByTag(ctx context.Context, arg ListActivitiesEnduranceByTagParams) ([]Vo2ActivitiesEndurance, error) {
	rows, err := q.db.QueryContext(ctx, listActivitiesEnduranceByTag, arg.ProviderID, arg.AthleteID, arg.Tag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vo2ActivitiesEndurance
	for rows.Next() {
		var i Vo2ActivitiesEndurance
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.AthleteID,
			&i.ProviderRawActivityID,
			&i.Name,
			&i.Description,
			&i.Sport,
			&i.StartTime,
			&i.EndTime,
			&i.IanaTimezone,
			&i.UtcOffset,
			&i.ElapsedTime,
			&i.MovingTime,
			&i.Distance,
			&i.ElevGain,
			&i.ElevLoss,
			&i.AvgSpeed,
			&i.AvgHr,
			&i.MaxHr,
			&i.SummaryPolyline,
			&i.SummaryRoute,
			&i.GpxFileUri,
			&i.FitFileUri,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAthleteActivitiesEndurance = `-- name: ListAthleteActivitiesEndurance :many
SELECT
	id, provider_id, athlete_id, provider_raw_activity_id, name, description, sport, start_time, end_time, iana_timezone, utc_offset, elapsed_time, moving_time, distance, elev_gain, elev_loss, avg_speed, avg_hr, max_hr, summary_polyline, summary_route, gpx_file_uri, fit_file_uri, created_at, updated_at, deleted_at
FROM vo2.activities_endurance
WHERE
	provider_id = $1 AND
	athlete_id = $2
ORDER BY
    start_time DESC
`

type ListAthleteActivitiesEnduranceParams struct {
	ProviderID int32
	AthleteID  uuid.UUID
}

func (q *Queries) ListAthleteActivitiesEndurance(ctx context.Context, arg ListAthleteActivitiesEnduranceParams) ([]Vo2ActivitiesEndurance, error) {
	rows, err := q.db.QueryContext(ctx, listAthleteActivitiesEndurance, arg.ProviderID, arg.AthleteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vo2ActivitiesEndurance
	for rows.Next() {
		var i Vo2ActivitiesEndurance
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.AthleteID,
			&i.ProviderRawActivityID,
			&i.Name,
			&i.Description,
			&i.Sport,
			&i.StartTime,
			&i.EndTime,
			&i.IanaTimezone,
			&i.UtcOffset,
			&i.ElapsedTime,
			&i.MovingTime,
			&i.Distance,
			&i.ElevGain,
			&i.ElevLoss,
			&i.AvgSpeed,
			&i.AvgHr,
			&i.MaxHr,
			&i.SummaryPolyline,
			&i.SummaryRoute,
			&i.GpxFileUri,
			&i.FitFileUri,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertActivityEndurance = `-- name: UpsertActivityEndurance :one
INSERT INTO vo2.activities_endurance
	(provider_id, athlete_id, provider_raw_activity_id, name, description, sport, start_time, end_time, iana_timezone, utc_offset, elapsed_time, moving_time, distance, elev_gain, elev_loss, avg_speed, avg_hr, max_hr, summary_polyline, summary_route, gpx_file_uri, fit_file_uri)
VALUES
	(
    	$1,
    	$2,
    	$3,
    	$4,
    	$5,
    	$6,
    	$7,
    	$8,
    	$9,
    	$10,
    	$11,
    	$12,
    	$13,
    	$14,
    	$15,
    	$16,
    	$17,
    	$18,
    	$19,
    	NULLIF($20, ''),
    	$21,
    	$22
)
ON CONFLICT
	(provider_id, athlete_id, provider_raw_activity_id)
DO UPDATE SET
	name = $4,
	description = $5,
	sport = $6,
	start_time = $7,
	end_time = $8,
	iana_timezone = $9,
	utc_offset = $10,
	elapsed_time = $11,
	moving_time = $12,
	distance = $13,
	elev_gain = $14,
	elev_loss = $15,
	avg_speed = $16,
	avg_hr = $17,
	max_hr = $18,
	summary_polyline = $19,
	summary_route = NULLIF($20, ''),
	gpx_file_uri = $21,
	fit_file_uri = $22
RETURNING id, provider_id, athlete_id, provider_raw_activity_id, name, description, sport, start_time, end_time, iana_timezone, utc_offset, elapsed_time, moving_time, distance, elev_gain, elev_loss, avg_speed, avg_hr, max_hr, summary_polyline, summary_route, gpx_file_uri, fit_file_uri, created_at, updated_at, deleted_at
`

type UpsertActivityEnduranceParams struct {
	ProviderID            int32
	AthleteID             uuid.UUID
	ProviderRawActivityID uuid.UUID
	Name                  string
	Description           sql.NullString
	Sport                 string
	StartTime             time.Time
	EndTime               time.Time
	IanaTimezone          sql.NullString
	UtcOffset             sql.NullInt32
	ElapsedTime           int32
	MovingTime            int32
	Distance              int32
	ElevGain              sql.NullInt32
	ElevLoss              sql.NullInt32
	AvgSpeed              float64
	AvgHr                 sql.NullInt32
	MaxHr                 sql.NullInt32
	SummaryPolyline       sql.NullString
	SummaryRoute          interface{}
	GpxFileUri            sql.NullString
	FitFileUri            sql.NullString
}

func (q *Queries) UpsertActivityEndurance(ctx context.Context, arg UpsertActivityEnduranceParams) (Vo2ActivitiesEndurance, error) {
	row := q.db.QueryRowContext(ctx, upsertActivityEndurance,
		arg.ProviderID,
		arg.AthleteID,
		arg.ProviderRawActivityID,
		arg.Name,
		arg.Description,
		arg.Sport,
		arg.StartTime,
		arg.EndTime,
		arg.IanaTimezone,
		arg.UtcOffset,
		arg.ElapsedTime,
		arg.MovingTime,
		arg.Distance,
		arg.ElevGain,
		arg.ElevLoss,
		arg.AvgSpeed,
		arg.AvgHr,
		arg.MaxHr,
		arg.SummaryPolyline,
		arg.SummaryRoute,
		arg.GpxFileUri,
		arg.FitFileUri,
	)
	var i Vo2ActivitiesEndurance
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.AthleteID,
		&i.ProviderRawActivityID,
		&i.Name,
		&i.Description,
		&i.Sport,
		&i.StartTime,
		&i.EndTime,
		&i.IanaTimezone,
		&i.UtcOffset,
		&i.ElapsedTime,
		&i.MovingTime,
		&i.Distance,
		&i.ElevGain,
		&i.ElevLoss,
		&i.AvgSpeed,
		&i.AvgHr,
		&i.MaxHr,
		&i.SummaryPolyline,
		&i.SummaryRoute,
		&i.GpxFileUri,
		&i.FitFileUri,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const upsertActivityThresholdAnalysis = `-- name: UpsertActivityThresholdAnalysis :one
INSERT INTO vo2.activities_threshold_analysis (
	activity_endurance_id,
	time_at_lt1_threshold,
	time_at_lt2_threshold,
	raw_analysis
)
VALUES (
	$1,
	$2,
	$3,
	$4
)
ON CONFLICT
	(activity_endurance_id)
DO UPDATE SET
	time_at_lt1_threshold = $2,
	time_at_lt2_threshold = $3,
	raw_analysis = $4
RETURNING id, activity_endurance_id, time_at_lt1_threshold, time_at_lt2_threshold, raw_analysis, created_at, updated_at, deleted_at
`

type UpsertActivityThresholdAnalysisParams struct {
	ActivityEnduranceID uuid.UUID
	TimeAtLt1Threshold  int32
	TimeAtLt2Threshold  int32
	RawAnalysis         json.RawMessage
}

func (q *Queries) UpsertActivityThresholdAnalysis(ctx context.Context, arg UpsertActivityThresholdAnalysisParams) (Vo2ActivitiesThresholdAnalysis, error) {
	row := q.db.QueryRowContext(ctx, upsertActivityThresholdAnalysis,
		arg.ActivityEnduranceID,
		arg.TimeAtLt1Threshold,
		arg.TimeAtLt2Threshold,
		arg.RawAnalysis,
	)
	var i Vo2ActivitiesThresholdAnalysis
	err := row.Scan(
		&i.ID,
		&i.ActivityEnduranceID,
		&i.TimeAtLt1Threshold,
		&i.TimeAtLt2Threshold,
		&i.RawAnalysis,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const upsertAthlete = `-- name: UpsertAthlete :one
INSERT INTO vo2.athletes
    (user_id, age, height_cm, country, gender, first_name, last_name, display_name, email)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9)
ON CONFLICT (user_id) DO UPDATE SET
	age = $2,
	height_cm = $3,
	country = $4,
	gender = $5,
	first_name = $6,
	last_name = $7,
	display_name = $8,
	email = $9
RETURNING id, user_id, age, height_cm, country, gender, first_name, last_name, display_name, email, created_at, updated_at, deleted_at
`

type UpsertAthleteParams struct {
	UserID      uuid.UUID
	Age         int16
	HeightCm    int16
	Country     string
	Gender      Gender
	FirstName   string
	LastName    string
	DisplayName string
	Email       string
}

func (q *Queries) UpsertAthlete(ctx context.Context, arg UpsertAthleteParams) (Vo2Athlete, error) {
	row := q.db.QueryRowContext(ctx, upsertAthlete,
		arg.UserID,
		arg.Age,
		arg.HeightCm,
		arg.Country,
		arg.Gender,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.Email,
	)
	var i Vo2Athlete
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Age,
		&i.HeightCm,
		&i.Country,
		&i.Gender,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
